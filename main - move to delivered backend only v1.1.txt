from mfrc522 import MFRC522
import network
import time
import json
import urequests

# Configuration
WIFI_SSID = '504'
WIFI_PASSWORD = 'qwertyuio'
FIREBASE_URL = 'https://iot-sem5-minipo-default-rtdb.asia-southeast1.firebasedatabase.app/'

# Initialize RFID reader
reader = MFRC522(spi_id=0, sck=6, miso=4, mosi=7, cs=5, rst=22)

def connect_wifi():
    wifi = network.WLAN(network.STA_IF)
    wifi.active(True)
    wifi.connect(WIFI_SSID, WIFI_PASSWORD)
    while not wifi.isconnected():
        print("Connecting to WiFi...")
        time.sleep(1)
    print("Connected!")
    print("IP Address:", wifi.ifconfig()[0])

def read_single_tag():
    print("Waiting for RFID tag...")
    while True:
        try:
            reader.init()
            (stat, tag_type) = reader.request(reader.REQIDL)
            if stat == reader.OK:
                (stat, uid) = reader.SelectTagSN()
                if stat == reader.OK:
                    card = int.from_bytes(bytes(uid), "little", False)
                    print(f"Tag detected! ID: {card}")
                    return str(card)
            time.sleep_ms(100)
        except Exception as e:
            print("Error reading tag:", str(e))
            time.sleep_ms(100)
            continue

def get_database():
    try:
        response = urequests.get(FIREBASE_URL + '.json')
        data = response.json() if response.text != 'null' else {}
        response.close()
        return data
    except Exception as e:
        print("Error getting database:", str(e))
        return {}

def update_database(data):
    try:
        response = urequests.put(
            FIREBASE_URL + '.json',
            headers={'Content-Type': 'application/json'},
            data=json.dumps(data)
        )
        print("Database update successful")
        response.close()
        return True
    except Exception as e:
        print("Update failed:", str(e))
        return False

def find_product_by_rfid(database, rfid_id):
    inventory = database.get('inventory', {})
    for product_name, product_data in inventory.items():
        if 'rfid_tags' in product_data and product_data['rfid_tags']:
            for rfid_name, rfid_info in product_data['rfid_tags'].items():
                if rfid_info.get('raw_id') == rfid_id:
                    return product_name, rfid_name, rfid_info
    return None, None, None

def move_to_delivered(database, product_name, rfid_name, rfid_info):
    # Create delivered section if it doesn't exist
    if 'delivered' not in database:
        database['delivered'] = {}
    
    # Create product entry in delivered if it doesn't exist
    if product_name not in database['delivered']:
        database['delivered'][product_name] = {
            "name": product_name,
            "rfid_tags": {},
            "total_quantity": 0
        }
    
    # Add RFID to delivered section
    if database['delivered'][product_name]['rfid_tags'] is None:
        database['delivered'][product_name]['rfid_tags'] = {}
    
    database['delivered'][product_name]['rfid_tags'][rfid_name] = {
        "added": time.time(),
        "raw_id": rfid_info['raw_id']
    }
    
    # Update delivered quantity
    database['delivered'][product_name]['total_quantity'] = len(database['delivered'][product_name]['rfid_tags'])
    
    # Remove from inventory
    del database['inventory'][product_name]['rfid_tags'][rfid_name]
    database['inventory'][product_name]['total_quantity'] -= 1
    
    return database

def main():
    connect_wifi()
    
    while True:
        try:
            # Read RFID tag
            rfid_id = read_single_tag()
            
            # Get current database state
            database = get_database()
            
            # Find product associated with RFID
            product_name, rfid_name, rfid_info = find_product_by_rfid(database, rfid_id)
            
            if product_name:
                print(f"Found product: {product_name} with RFID: {rfid_name}")
                
                # Move item to delivered section
                updated_database = move_to_delivered(database, product_name, rfid_name, rfid_info)
                
                # Update database
                if update_database(updated_database):
                    print(f"Successfully moved {rfid_name} to delivered section")
                else:
                    print("Failed to update database")
            else:
                print(f"RFID {rfid_id} not found in inventory")
            
            # Wait a bit before next read
            time.sleep(2)
            
        except Exception as e:
            print("Error in main loop:", str(e))
            time.sleep(2)
            continue

if __name__ == "__main__":
    print("Starting RFID delivery tracker...")
    main()
