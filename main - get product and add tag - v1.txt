from mfrc522 import MFRC522
import network
import socket
import time
import json
import urequests

# Configuration
WIFI_SSID = '504'
WIFI_PASSWORD = 'qwertyuio'
FIREBASE_URL = 'https://iot-sem5-minipo-default-rtdb.asia-southeast1.firebasedatabase.app/inventory.json'

# Initialize RFID reader
reader = MFRC522(spi_id=0, sck=6, miso=4, mosi=7, cs=5, rst=22)

def connect_wifi():
    wifi = network.WLAN(network.STA_IF)
    wifi.active(True)
    wifi.connect(WIFI_SSID, WIFI_PASSWORD)
    while not wifi.isconnected():
        print("Connecting to WiFi...")
        time.sleep(1)
    print("Connected!")
    print("IP Address:", wifi.ifconfig()[0])
    return wifi.ifconfig()[0]

def read_single_tag():
    print("Waiting for RFID tag (5 seconds)...")
    start_time = time.time()
    
    while (time.time() - start_time) < 5:
        try:
            reader.init()
            (stat, tag_type) = reader.request(reader.REQIDL)
            if stat == reader.OK:
                (stat, uid) = reader.SelectTagSN()
                if stat == reader.OK:
                    card = int.from_bytes(bytes(uid), "little", False)
                    print(f"Tag detected! ID: {card}")
                    return str(card)
            time.sleep_ms(100)
        except Exception as e:
            print("Error reading tag:", str(e))
            time.sleep_ms(100)
            continue
    
    print("No tag detected within 5 seconds")
    return None

def get_current_inventory():
    try:
        response = urequests.get(FIREBASE_URL)
        data = response.json() if response.text != 'null' else {}
        response.close()
        return data
    except Exception as e:
        print("Error getting inventory:", str(e))
        return {}

def update_inventory(inventory_data):
    try:
        response = urequests.put(
            FIREBASE_URL,
            headers={'Content-Type': 'application/json'},
            data=json.dumps(inventory_data)
        )
        print("Inventory update successful")
        response.close()
        return True
    except Exception as e:
        print("Update failed:", str(e))
        return False

def generate_rfid_name(product_name, tag_id):
    """Generate a formatted RFID name like PRODUCT-1234"""
    return f"{product_name.upper()}-{tag_id[-4:]}"

def check_duplicate_tag(inventory, tag_id):
    """Check if tag_id exists in any product's rfid_tags"""
    for product in inventory.values():
        if "rfid_tags" in product:
            # Handle case where rfid_tags is None
            if product["rfid_tags"] is None:
                continue
            for rfid in product["rfid_tags"].values():
                if rfid.get("raw_id") == tag_id:
                    return True
    return False

def add_rfid_to_product(product_id, tag_id):
    inventory = get_current_inventory()
    
    # Check for duplicate tag
    if check_duplicate_tag(inventory, tag_id):
        return False, "Duplicate RFID tag detected"
    
    # Generate formatted RFID name
    rfid_name = generate_rfid_name(product_id, tag_id)
    
    # If product doesn't exist, create it
    if product_id not in inventory:
        inventory[product_id] = {
            "name": product_id,
            "rfid_tags": {},
            "total_quantity": 0
        }
    
    # Initialize rfid_tags if it's None or doesn't exist
    if "rfid_tags" not in inventory[product_id] or inventory[product_id]["rfid_tags"] is None:
        inventory[product_id]["rfid_tags"] = {}
    
    # Add new RFID tag with timestamp and raw ID
    inventory[product_id]["rfid_tags"][rfid_name] = {
        "added": time.time(),
        "raw_id": tag_id
    }
    
    # Update total quantity
    inventory[product_id]["total_quantity"] = len(inventory[product_id]["rfid_tags"])
    
    # Update Firebase
    if update_inventory(inventory):
        return True, rfid_name
    return False, "Failed to update database"

def parse_query_string(request):
    """Extract product name from URL query string - MicroPython compatible"""
    try:
        # Find the GET request line
        request_line = request.split('\r\n')[0]
        # Extract the path with query string
        path = request_line.split(' ')[1]
        # Check if there's a query string
        if '?' in path:
            # Split path and query string
            query = path.split('?')[1]
            # Split query parameters
            params = query.split('&')
            # Look for product parameter
            for param in params:
                if param.startswith('product='):
                    return param.split('=')[1]
    except:
        pass
    return None

def create_response(status_code, data):
    """Create HTTP response with appropriate status code and JSON data"""
    status_messages = {
        200: 'OK',
        400: 'Bad Request',
        409: 'Conflict',
        500: 'Internal Server Error'
    }
    
    response = f'HTTP/1.0 {status_code} {status_messages.get(status_code, "")}\r\n'
    response += 'Content-Type: application/json\r\n'
    response += 'Access-Control-Allow-Origin: *\r\n\r\n'
    response += json.dumps(data)
    return response

def start_server():
    addr = connect_wifi()
    
    s = socket.socket()
    s.bind(('', 80))
    s.listen(1)
    
    print(f"Server started at http://{addr}")
    
    while True:
        try:
            cl, addr = s.accept()
            print('Client connected from', addr)
            
            request = cl.recv(1024).decode()
            
            if 'GET /read_tag' in request:
                print("Tag reading request received")
                
                # Extract product name from query string
                product_name = parse_query_string(request)
                if not product_name:
                    response = create_response(400, {
                        'status': 'error',
                        'message': 'Product name not provided'
                    })
                    cl.send(response)
                    cl.close()
                    continue
                
                # Read RFID tag
                tag_id = read_single_tag()
                
                if not tag_id:
                    response = create_response(400, {
                        'status': 'error',
                        'message': 'No tag detected after 5 seconds'
                    })
                else:
                    # Try to add to inventory
                    success, result = add_rfid_to_product(product_name, tag_id)
                    
                    if success:
                        response = create_response(200, {
                            'status': 'success',
                            'tag_id': tag_id,
                            'rfid_name': result,
                            'product': product_name
                        })
                    else:
                        response = create_response(409, {
                            'status': 'error',
                            'message': result
                        })
                
                cl.send(response)
            else:
                response = create_response(400, {
                    'status': 'error',
                    'message': 'Invalid endpoint'
                })
                cl.send(response)
            
            cl.close()
            print("Connection closed")
            
        except Exception as e:
            print("Server error:", str(e))
            try:
                response = create_response(500, {
                    'status': 'error',
                    'message': 'Internal server error'
                })
                cl.send(response)
                cl.close()
            except:
                pass
            continue

# Start the server
print("Initializing server...")
start_server()
